// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id
  username        String    @unique
  email           String    @unique
  profile         Profile?
  chats           Chat[]
  threads         Thread[]
  likedThreads    Thread[]  @relation("ThreadLikes")
  ownedProjects   Project[]
  invitedProjects Project[] @relation("ProjectInvite")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  bio       String?
  picture   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id            String   @id @default(cuid())
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  collaborators User[]   @relation("ProjectInvite")
  ideas         Idea[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Idea {
  id          String   @id @default(cuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  issues      String[]
  features    String[]
  tags        Tag[]    @relation("IdeaTags")
  impact      Int
  feasibility Int
  difficulty  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Thread {
  id        String   @id @default(cuid())
  title     String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String
  likeCount Int      @default(0)
  likedBy   User[]   @relation("ThreadLikes")
  replyToId String?
  replyTo   Thread?  @relation("ThreadReplies", fields: [replyToId], references: [id])
  replies   Thread[] @relation("ThreadReplies")
  category  Category
  tags      Tag[]    @relation("ThreadTags")
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Category {
  Announcements
  Insights
  Questions
  Suggestions
  Random
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  threads   Thread[] @relation("ThreadTags")
  ideas     Idea[]   @relation("IdeaTags")
  createdAt DateTime @default(now())
}

model Chat {
  id             String   @id @default(cuid())
  conversationId String   @unique
  prompt         String
  response       String
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique
  createdAt      DateTime @default(now())
}
